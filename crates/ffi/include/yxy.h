#ifndef yxy_h
#define yxy_h

/* Generated with cbindgen:0.24.3 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually.
 */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Error code definition
 */
typedef enum ErrorCode {
  /**
   * No error
   */
  OK = 0,
  /**
   * Generic error
   */
  ERROR = -1,
  /**
   * Invalid inputs or operation
   */
  EInvalid = -2,
  /**
   * Authentication failed
   */
  EAuth = -3,
  /**
   * No bind info etc.
   */
  ENoFound = -4,
  /**
   * Bad phone number
   */
  EPhoneNum = -10,
  /**
   * Limit of SMS verification code sent
   */
  ELimited = -11,
  /**
   * Error verification code & captcha code
   */
  EVeriCode = -12,
  /**
   * Failed to get captcha image
   */
  ECaptcha = -13,
} ErrorCode;

/**
 * Authorized session handle
 */
typedef struct AppHandler AppHandler;

/**
 * Handle of login procedure
 */
typedef struct LoginHandler LoginHandler;

#if defined(DEFINE_BLOCKING)
typedef struct RoomInfo {
  char *area_id;
  char *building_code;
  char *floor_code;
  char *room_code;
} RoomInfo;
#endif

#if defined(DEFINE_BLOCKING)
typedef struct ElectricityInfo {
  char *area_id;
  char *building_code;
  char *floor_code;
  char *room_code;
  char *display_room_name;
  char *room_status;
  float total_surplus;
  float total_amount;
  float surplus;
  float surplus_amount;
  float subsidy;
  float subsidy_amount;
} ElectricityInfo;
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Security token result
 *
 * - `token: *mut c_char`: token c-string
 * - `level: c_int`: security level, 0: no captcha required, 1: captcha required
 */
typedef struct SecurityToken {
  int level;
  char *token;
} SecurityToken;
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Login Info
 *
 * - `token: *mut c_char`: session token c-string
 * - `bind_card_status: c_int`: 0: not, 1: yes
 */
typedef struct LoginInfo {
  char *uid;
  char *token;
  char *device_id;
  int bind_card_status;
} LoginInfo;
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Free c-string
 *
 * Deallocate c-style string to avoid memory leak.
 *
 * ## Safety
 * C-FFI usage only
 *
 */
void destruct_c_string(char *ptr);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_room_info(struct RoomInfo *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * ## Safety
 * C-FFI usage only
 */
struct RoomInfo *query_ele_bind(const struct AppHandler *handler);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_electricity_info(struct ElectricityInfo *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * ## Safety
 * C-FFI usage only
 */
struct ElectricityInfo *query_ele(const struct AppHandler *handler);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * ## Safety
 * C-FFI usage only
 */
struct ElectricityInfo *query_ele_by_room_info(const struct AppHandler *handler,
                                               const struct RoomInfo *info);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_app_handler(struct AppHandler *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Application Authorization
 *
 * # Inputs
 * - `uid: *const c_char`: uid c-string, UTF-8
 * # Returns
 * - `*mut c_char`: token c-string, UTF-8. Return nullptr on error.
 *
 * # Safety
 * C-FFI usage only
 */
char *app_auth(const char *uid);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Build [`AppHandler`] by exist session token
 *
 * ## Safety
 * C-FFI usage only
 */
struct AppHandler *build_app_handler(const char *token);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Get [`AppHandler`] by UID with default query
 *
 * ## Safety
 * C-FFI usage only
 */
struct AppHandler *get_app_handler(const char *uid);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_login_handler(struct LoginHandler *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * ## Safety
 * C-FFI usage only
 */
struct LoginHandler *new_login_handler(void);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Build [`LoginHandler`] by provided `device_id`
 *
 * ## Safety
 * C-FFI usage only
 */
struct LoginHandler *build_login_handler(char *device_id);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_security_token(struct SecurityToken *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Get security token
 *
 * ## Safety
 * C-FFI usage only
 */
struct SecurityToken *get_security_token(const struct LoginHandler *handler);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Get captcha image
 *
 * ## Safety
 * C-FFI usage only
 */
char *get_captcha_image(const struct LoginHandler *handler,
                        const char *security_token);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Send SMS verification code
 *
 * ## Inputs
 * - `handler: *const login_handler`: Pointer of [`LoginHandler`]
 * - `security_token: *const c_char`: c-string of security token
 * - `captcha: *const c_char`: c-string of captcha.
 * If captcha input `NULL`, it means no captcha is required.
 *
 * ## Returns
 * - `c_int`: `0` on success, `1` on user is not exist(registered), otherwise
 * error code
 *
 * ## Safety
 * C-FFI usage only
 */
int send_verification_code(const struct LoginHandler *handler,
                           const char *phone_number, const char *security_token,
                           const char *captcha);
#endif

#if defined(DEFINE_BLOCKING)
void destruct_login_info(struct LoginInfo *ptr);
#endif

#if defined(DEFINE_BLOCKING)
/**
 * Do login by SMS verification code
 *
 * ## Safety
 * C-FFI usage only
 */
struct LoginInfo *do_login_by_code(const struct LoginHandler *handler,
                                   const char *phone_number, const char *code);
#endif

#endif /* yxy_h */
